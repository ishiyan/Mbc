#include <cstdio>
#include <cstring>
#include <iostream>
#include <iomanip>

#include "mbc/time/dotNetTicks.h"
#include "mbc/testharness.h"

namespace {

    TESTGROUP("time::dotNetTicks")
    {
        typedef struct
        {
            long long ticks_; int year_, month_, day_, hour_, minute_, second_, millisecond_, nano100_, dayofyear_;
            const char *text_full_, *text_seconds_, *text_minutes_, *text_hours_, *text_date_, *text_time_;
        } DotNetData;
        const DotNetData common_data[]
        {
            { 640973087999870000, 2032,  2, 29, 23, 59, 59, 987, 9870000,  60, "2032-02-29 23:59:59.9870000", "2032-02-29 23:59:59", "2032-02-29 23:59", "2032-02-29 23", "2032-02-29", "23:59:59" },
            { 639710783999870000, 2028,  2, 29, 23, 59, 59, 987, 9870000,  60, "2028-02-29 23:59:59.9870000", "2028-02-29 23:59:59", "2028-02-29 23:59", "2028-02-29 23", "2028-02-29", "23:59:59" },
            { 638448479999870000, 2024,  2, 29, 23, 59, 59, 987, 9870000,  60, "2024-02-29 23:59:59.9870000", "2024-02-29 23:59:59", "2024-02-29 23:59", "2024-02-29 23", "2024-02-29", "23:59:59" },
            { 637186175999870000, 2020,  2, 29, 23, 59, 59, 987, 9870000,  60, "2020-02-29 23:59:59.9870000", "2020-02-29 23:59:59", "2020-02-29 23:59", "2020-02-29 23", "2020-02-29", "23:59:59" },
            { 635923871999870000, 2016,  2, 29, 23, 59, 59, 987, 9870000,  60, "2016-02-29 23:59:59.9870000", "2016-02-29 23:59:59", "2016-02-29 23:59", "2016-02-29 23", "2016-02-29", "23:59:59" },
            { 635268095999870000, 2014,  1, 31, 23, 59, 59, 987, 9870000,  31, "2014-01-31 23:59:59.9870000", "2014-01-31 23:59:59", "2014-01-31 23:59", "2014-01-31 23", "2014-01-31", "23:59:59" },
            { 635268095992870000, 2014,  1, 31, 23, 59, 59, 287, 2870000,  31, "2014-01-31 23:59:59.2870000", "2014-01-31 23:59:59", "2014-01-31 23:59", "2014-01-31 23", "2014-01-31", "23:59:59" },
            { 635268095989870000, 2014,  1, 31, 23, 59, 58, 987, 9870000,  31, "2014-01-31 23:59:58.9870000", "2014-01-31 23:59:58", "2014-01-31 23:59", "2014-01-31 23", "2014-01-31", "23:59:58" },
            { 635268095980070000, 2014,  1, 31, 23, 59, 58,   7,   70000,  31, "2014-01-31 23:59:58.0070000", "2014-01-31 23:59:58", "2014-01-31 23:59", "2014-01-31 23", "2014-01-31", "23:59:58" },
            { 634661567999870000, 2012,  2, 29, 23, 59, 59, 987, 9870000,  60, "2012-02-29 23:59:59.9870000", "2012-02-29 23:59:59", "2012-02-29 23:59", "2012-02-29 23", "2012-02-29", "23:59:59" },
            { 633399263999870000, 2008,  2, 29, 23, 59, 59, 987, 9870000,  60, "2008-02-29 23:59:59.9870000", "2008-02-29 23:59:59", "2008-02-29 23:59", "2008-02-29 23", "2008-02-29", "23:59:59" },
            { 628013197219870000, 1991,  2,  5,  3,  2,  1, 987, 9870000,  36, "1991-02-05 03:02:01.9870000", "1991-02-05 03:02:01", "1991-02-05 03:02", "1991-02-05 03", "1991-02-05", "03:02:01" },
            { 622038527999870000, 1972,  2, 29, 23, 59, 59, 987, 9870000,  60, "1972-02-29 23:59:59.9870000", "1972-02-29 23:59:59", "1972-02-29 23:59", "1972-02-29 23", "1972-02-29", "23:59:59" },
            { 621701677219870000, 1971,  2,  5,  3,  2,  1, 987, 9870000,  36, "1971-02-05 03:02:01.9870000", "1971-02-05 03:02:01", "1971-02-05 03:02", "1971-02-05 03", "1971-02-05", "03:02:01" },
            { 621356005230870000, 1970,  1,  1,  1,  2,  3,  87,  870000,   1, "1970-01-01 01:02:03.0870000", "1970-01-01 01:02:03", "1970-01-01 01:02", "1970-01-01 01", "1970-01-01", "01:02:03" },
            { 621355968010870000, 1970,  1,  1,  0,  0,  1,  87,  870000,   1, "1970-01-01 00:00:01.0870000", "1970-01-01 00:00:01", "1970-01-01 00:00", "1970-01-01 00", "1970-01-01", "00:00:01" },
            { 621355968009870000, 1970,  1,  1,  0,  0,  0, 987, 9870000,   1, "1970-01-01 00:00:00.9870000", "1970-01-01 00:00:00", "1970-01-01 00:00", "1970-01-01 00", "1970-01-01", "00:00:00" },
            { 621355968000020000, 1970,  1,  1,  0,  0,  0,   2,   20000,   1, "1970-01-01 00:00:00.0020000", "1970-01-01 00:00:00", "1970-01-01 00:00", "1970-01-01 00", "1970-01-01", "00:00:00" },
            { 621355968000010000, 1970,  1,  1,  0,  0,  0,   1,   10000,   1, "1970-01-01 00:00:00.0010000", "1970-01-01 00:00:00", "1970-01-01 00:00", "1970-01-01 00", "1970-01-01", "00:00:00" },
            { 621355968000000000, 1970,  1,  1,  0,  0,  0,   0,       0,   1, "1970-01-01 00:00:00.0000000", "1970-01-01 00:00:00", "1970-01-01 00:00", "1970-01-01 00", "1970-01-01", "00:00:00" },
            { 621355967999990000, 1969, 12, 31, 23, 59, 59, 999, 9990000, 365, "1969-12-31 23:59:59.9990000", "1969-12-31 23:59:59", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:59" },
            { 621355967999870000, 1969, 12, 31, 23, 59, 59, 987, 9870000, 365, "1969-12-31 23:59:59.9870000", "1969-12-31 23:59:59", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:59" },
            { 621355967990870000, 1969, 12, 31, 23, 59, 59,  87,  870000, 365, "1969-12-31 23:59:59.0870000", "1969-12-31 23:59:59", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:59" },
            { 621355967989870000, 1969, 12, 31, 23, 59, 58, 987, 9870000, 365, "1969-12-31 23:59:58.9870000", "1969-12-31 23:59:58", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:58" },
            { 621355967980870000, 1969, 12, 31, 23, 59, 58,  87,  870000, 365, "1969-12-31 23:59:58.0870000", "1969-12-31 23:59:58", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:58" },
            { 621355967990000000, 1969, 12, 31, 23, 59, 59,   0,       0, 365, "1969-12-31 23:59:59.0000000", "1969-12-31 23:59:59", "1969-12-31 23:59", "1969-12-31 23", "1969-12-31", "23:59:59" },
            { 620776223999870000, 1968,  2, 29, 23, 59, 59, 987, 9870000,  60, "1968-02-29 23:59:59.9870000", "1968-02-29 23:59:59", "1968-02-29 23:59", "1968-02-29 23", "1968-02-29", "23:59:59" },
            { 615390157219870000, 1951,  2,  5,  3,  2,  1, 987, 9870000,  36, "1951-02-05 03:02:01.9870000", "1951-02-05 03:02:01", "1951-02-05 03:02", "1951-02-05 03", "1951-02-05", "03:02:01" },
            { 600579359999870000, 1904,  2, 29, 23, 59, 59, 987, 9870000,  60, "1904-02-29 23:59:59.9870000", "1904-02-29 23:59:59", "1904-02-29 23:59", "1904-02-29 23", "1904-02-29", "23:59:59" },
            { 586694879999870000, 1860,  2, 29, 23, 59, 59, 987, 9870000,  60, "1860-02-29 23:59:59.9870000", "1860-02-29 23:59:59", "1860-02-29 23:59", "1860-02-29 23", "1860-02-29", "23:59:59" },
            { 583833421219870000, 1851,  2,  5,  3,  2,  1, 987, 9870000,  36, "1851-02-05 03:02:01.9870000", "1851-02-05 03:02:01", "1851-02-05 03:02", "1851-02-05 03", "1851-02-05", "03:02:01" },
            { 569022623999870000, 1804,  2, 29, 23, 59, 59, 987, 9870000,  60, "1804-02-29 23:59:59.9870000", "1804-02-29 23:59:59", "1804-02-29 23:59", "1804-02-29 23", "1804-02-29", "23:59:59" },
            { 552276685219870000, 1751,  2,  5,  3,  2,  1, 987, 9870000,  36, "1751-02-05 03:02:01.9870000", "1751-02-05 03:02:01", "1751-02-05 03:02", "1751-02-05 03", "1751-02-05", "03:02:01" },
            { 520719949219870000, 1651,  2,  5,  3,  2,  1, 987, 9870000,  36, "1651-02-05 03:02:01.9870000", "1651-02-05 03:02:01", "1651-02-05 03:02", "1651-02-05 03", "1651-02-05", "03:02:01" },
            { 504911232000000000, 1601,  1,  1,  0,  0,  0,   0,       0,   1, "1601-01-01 00:00:00.0000000", "1601-01-01 00:00:00", "1601-01-01 00:00", "1601-01-01 00", "1601-01-01", "00:00:00" },
            { 504911231999990000, 1600, 12, 31, 23, 59, 59, 999, 9990000, 366, "1600-12-31 23:59:59.9990000", "1600-12-31 23:59:59", "1600-12-31 23:59", "1600-12-31 23", "1600-12-31", "23:59:59" },
            { 504911231999870000, 1600, 12, 31, 23, 59, 59, 987, 9870000, 366, "1600-12-31 23:59:59.9870000", "1600-12-31 23:59:59", "1600-12-31 23:59", "1600-12-31 23", "1600-12-31", "23:59:59" },
            { 504911231990870000, 1600, 12, 31, 23, 59, 59,  87,  870000, 366, "1600-12-31 23:59:59.0870000", "1600-12-31 23:59:59", "1600-12-31 23:59", "1600-12-31 23", "1600-12-31", "23:59:59" },
            { 504910368000000000, 1600, 12, 31,  0,  0,  0,   0,       0, 366, "1600-12-31 00:00:00.0000000", "1600-12-31 00:00:00", "1600-12-31 00:00", "1600-12-31 00", "1600-12-31", "00:00:00" },
            { 489162349219870000, 1551,  2,  5,  3,  2,  1, 987, 9870000,  36, "1551-02-05 03:02:01.9870000", "1551-02-05 03:02:01", "1551-02-05 03:02", "1551-02-05 03", "1551-02-05", "03:02:01" },
            { 457605613219870000, 1451,  2,  5,  3,  2,  1, 987, 9870000,  36, "1451-02-05 03:02:01.9870000", "1451-02-05 03:02:01", "1451-02-05 03:02", "1451-02-05 03", "1451-02-05", "03:02:01" },
            { 426048877219870000, 1351,  2,  5,  3,  2,  1, 987, 9870000,  36, "1351-02-05 03:02:01.9870000", "1351-02-05 03:02:01", "1351-02-05 03:02", "1351-02-05 03", "1351-02-05", "03:02:01" },
            { 394492141219870000, 1251,  2,  5,  3,  2,  1, 987, 9870000,  36, "1251-02-05 03:02:01.9870000", "1251-02-05 03:02:01", "1251-02-05 03:02", "1251-02-05 03", "1251-02-05", "03:02:01" },
            { 362934541219870000, 1151,  2,  5,  3,  2,  1, 987, 9870000,  36, "1151-02-05 03:02:01.9870000", "1151-02-05 03:02:01", "1151-02-05 03:02", "1151-02-05 03", "1151-02-05", "03:02:01" },
            { 331377805219870000, 1051,  2,  5,  3,  2,  1, 987, 9870000,  36, "1051-02-05 03:02:01.9870000", "1051-02-05 03:02:01", "1051-02-05 03:02", "1051-02-05 03", "1051-02-05", "03:02:01" },
            { 299821069219870000,  951,  2,  5,  3,  2,  1, 987, 9870000,  36, "0951-02-05 03:02:01.9870000", "0951-02-05 03:02:01", "0951-02-05 03:02", "0951-02-05 03", "0951-02-05", "03:02:01" },
            { 268264333219870000,  851,  2,  5,  3,  2,  1, 987, 9870000,  36, "0851-02-05 03:02:01.9870000", "0851-02-05 03:02:01", "0851-02-05 03:02", "0851-02-05 03", "0851-02-05", "03:02:01" },
            { 236706733219870000,  751,  2,  5,  3,  2,  1, 987, 9870000,  36, "0751-02-05 03:02:01.9870000", "0751-02-05 03:02:01", "0751-02-05 03:02", "0751-02-05 03", "0751-02-05", "03:02:01" },
            { 205149997219870000,  651,  2,  5,  3,  2,  1, 987, 9870000,  36, "0651-02-05 03:02:01.9870000", "0651-02-05 03:02:01", "0651-02-05 03:02", "0651-02-05 03", "0651-02-05", "03:02:01" },
            { 173593261219870000,  551,  2,  5,  3,  2,  1, 987, 9870000,  36, "0551-02-05 03:02:01.9870000", "0551-02-05 03:02:01", "0551-02-05 03:02", "0551-02-05 03", "0551-02-05", "03:02:01" },
            { 142036525219870000,  451,  2,  5,  3,  2,  1, 987, 9870000,  36, "0451-02-05 03:02:01.9870000", "0451-02-05 03:02:01", "0451-02-05 03:02", "0451-02-05 03", "0451-02-05", "03:02:01" },
            { 110478925219870000,  351,  2,  5,  3,  2,  1, 987, 9870000,  36, "0351-02-05 03:02:01.9870000", "0351-02-05 03:02:01", "0351-02-05 03:02", "0351-02-05 03", "0351-02-05", "03:02:01" },
            {  78922189219870000,  251,  2,  5,  3,  2,  1, 987, 9870000,  36, "0251-02-05 03:02:01.9870000", "0251-02-05 03:02:01", "0251-02-05 03:02", "0251-02-05 03", "0251-02-05", "03:02:01" },
            {  47365453219870000,  151,  2,  5,  3,  2,  1, 987, 9870000,  36, "0151-02-05 03:02:01.9870000", "0151-02-05 03:02:01", "0151-02-05 03:02", "0151-02-05 03", "0151-02-05", "03:02:01" },
            {  15808717219870000,   51,  2,  5,  3,  2,  1, 987, 9870000,  36, "0051-02-05 03:02:01.9870000", "0051-02-05 03:02:01", "0051-02-05 03:02", "0051-02-05 03", "0051-02-05", "03:02:01" },
            {   3522527999870000,   12,  2, 29, 23, 59, 59, 987, 9870000,  60, "0012-02-29 23:59:59.9870000", "0012-02-29 23:59:59", "0012-02-29 23:59", "0012-02-29 23", "0012-02-29", "23:59:59" },
            {   2260223999870000,    8,  2, 29, 23, 59, 59, 987, 9870000,  60, "0008-02-29 23:59:59.9870000", "0008-02-29 23:59:59", "0008-02-29 23:59", "0008-02-29 23", "0008-02-29", "23:59:59" },
            {     30349219870000,    1,  2,  5,  3,  2,  1, 987, 9870000,  36, "0001-02-05 03:02:01.9870000", "0001-02-05 03:02:01", "0001-02-05 03:02", "0001-02-05 03", "0001-02-05", "03:02:01" }
        };
        const int common_dataLength{ sizeof common_data / sizeof(DotNetData) };

        TESTCASE("toTm: verification against .net implementation")
        {
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                struct tm tm{};
                int nano100;
                mbc::time::DotNetTicks::toTm(d.ticks_, tm, nano100);

                ASSERT_EQUAL(d.year_, tm.tm_year + 1900) << "[" << std::to_string(i) << "] year: " << d.text_full_;
                ASSERT_EQUAL(d.month_, tm.tm_mon + 1) << "[" << std::to_string(i) << "] month: " << d.text_full_;
                ASSERT_EQUAL(d.day_, tm.tm_mday) << "[" << std::to_string(i) << "] day: " << d.text_full_;
                ASSERT_EQUAL(d.dayofyear_, tm.tm_yday + 1) << "[" << std::to_string(i) << "] day of year: " << d.text_full_;
                ASSERT_EQUAL(d.hour_, tm.tm_hour) << "[" << std::to_string(i) << "] hour: " << d.text_full_;
                ASSERT_EQUAL(d.minute_, tm.tm_min) << "[" << std::to_string(i) << "] minute: " << d.text_full_;
                ASSERT_EQUAL(d.second_, tm.tm_sec) << "[" << std::to_string(i) << "] second: " << d.text_full_;
                ASSERT_EQUAL(d.nano100_, nano100) << "[" << std::to_string(i) << "] nano100: " << d.text_full_;
            }
        }

        TESTCASE("hour: verification against .net implementation")
        {
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                const int hour{ mbc::time::DotNetTicks::hour(d.ticks_) };

                ASSERT_EQUAL(d.hour_, hour) << "[" << std::to_string(i) << "] hour: " << d.text_full_;
            }
        }

        TESTCASE("minute: verification against .net implementation")
        {
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                const int minute{ mbc::time::DotNetTicks::minute(d.ticks_) };

                ASSERT_EQUAL(d.minute_, minute) << "[" << std::to_string(i) << "] minute: " << d.text_full_;
            }
        }

        TESTCASE("second: verification against .net implementation")
        {
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                const int second{ mbc::time::DotNetTicks::second(d.ticks_) };

                ASSERT_EQUAL(d.second_, second) << "[" << std::to_string(i) << "] second: " << d.text_full_;
            }
        }

        TESTCASE("millisecond: verification against .net implementation")
        {
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                const int millisecond{ mbc::time::DotNetTicks::millisecond(d.ticks_) };

                ASSERT_EQUAL(d.millisecond_, millisecond) << "[" << std::to_string(i) << "] millisecond: " << d.text_full_;
            }
        }

        TESTCASE("toStringFull: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringFullBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringFull(buffer, mbc::time::DotNetTicks::toStringFullBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_full_, buffer) << "[" << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringFull: date delimiter")
        {
            const char delimiter{ '@' };
            char buffer[mbc::time::DotNetTicks::toStringFullBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringFull(buffer, mbc::time::DotNetTicks::toStringFullBufferLength, d.ticks_, delimiter);

                ASSERT_EQUAL(delimiter, buffer[4]) << "[ buffer[4] " << std::to_string(i) << "]";
                ASSERT_EQUAL(delimiter, buffer[7]) << "[ buffer[7] " << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringSeconds: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringSecondsBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringSeconds(buffer, mbc::time::DotNetTicks::toStringSecondsBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_seconds_, buffer) << "[" << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringSeconds: date delimiter")
        {
            const char delimiter{ '@' };
            char buffer[mbc::time::DotNetTicks::toStringSecondsBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringSeconds(buffer, mbc::time::DotNetTicks::toStringSecondsBufferLength, d.ticks_, delimiter);

                ASSERT_EQUAL(delimiter, buffer[4]) << "[ buffer[4] " << std::to_string(i) << "]";
                ASSERT_EQUAL(delimiter, buffer[7]) << "[ buffer[7] " << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringMinutes: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringMinutesBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringMinutes(buffer, mbc::time::DotNetTicks::toStringMinutesBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_minutes_, buffer) << "[" << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringMinutes: date delimiter")
        {
            const char delimiter{ '@' };
            char buffer[mbc::time::DotNetTicks::toStringMinutesBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringMinutes(buffer, mbc::time::DotNetTicks::toStringMinutesBufferLength, d.ticks_, delimiter);

                ASSERT_EQUAL(delimiter, buffer[4]) << "[ buffer[4] " << std::to_string(i) << "]";
                ASSERT_EQUAL(delimiter, buffer[7]) << "[ buffer[7] " << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringHours: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringHoursBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringHours(buffer, mbc::time::DotNetTicks::toStringHoursBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_hours_, buffer) << "[" << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringHours: date delimiter")
        {
            const char delimiter{ '@' };
            char buffer[mbc::time::DotNetTicks::toStringHoursBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringHours(buffer, mbc::time::DotNetTicks::toStringHoursBufferLength, d.ticks_, delimiter);

                ASSERT_EQUAL(delimiter, buffer[4]) << "[ buffer[4] " << std::to_string(i) << "]";
                ASSERT_EQUAL(delimiter, buffer[7]) << "[ buffer[7] " << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringDate: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringDateBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringDate(buffer, mbc::time::DotNetTicks::toStringDateBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_date_, buffer) << "[" << std::to_string(i) << "]: " << d.text_full_;
            }
        }

        TESTCASE("toStringDate: date delimiter")
        {
            const char delimiter{ '@' };
            char buffer[mbc::time::DotNetTicks::toStringDateBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                const DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringDate(buffer, mbc::time::DotNetTicks::toStringDateBufferLength, d.ticks_, delimiter);

                ASSERT_EQUAL(delimiter, buffer[4]) << "[ buffer[4] " << std::to_string(i) << "]";
                ASSERT_EQUAL(delimiter, buffer[7]) << "[ buffer[7] " << std::to_string(i) << "]";
            }
        }

        TESTCASE("toStringTime: verification against .net implementation")
        {
            char buffer[mbc::time::DotNetTicks::toStringTimeBufferLength];
            for (int i = 0; i < common_dataLength; ++i)
            {
                DotNetData d = common_data[i];
                mbc::time::DotNetTicks::toStringTime(buffer, mbc::time::DotNetTicks::toStringTimeBufferLength, d.ticks_);

                ASSERT_EQUAL(d.text_time_, buffer) << "[" << std::to_string(i) << "]: " << d.text_full_;
            }
        }

        const DotNetData leapYear_data[]
        {
            { 640973087999870000, 2032, 2, 29, 23, 59, 59, 987, 9870000, 60, "2032-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 639710783999870000, 2028, 2, 29, 23, 59, 59, 987, 9870000, 60, "2028-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 638448479999870000, 2024, 2, 29, 23, 59, 59, 987, 9870000, 60, "2024-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 637186175999870000, 2020, 2, 29, 23, 59, 59, 987, 9870000, 60, "2020-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 635923871999870000, 2016, 2, 29, 23, 59, 59, 987, 9870000, 60, "2016-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 634661567999870000, 2012, 2, 29, 23, 59, 59, 987, 9870000, 60, "2012-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 633399263999870000, 2008, 2, 29, 23, 59, 59, 987, 9870000, 60, "2008-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 622038527999870000, 1972, 2, 29, 23, 59, 59, 987, 9870000, 60, "1972-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 620776223999870000, 1968, 2, 29, 23, 59, 59, 987, 9870000, 60, "1968-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 600579359999870000, 1904, 2, 29, 23, 59, 59, 987, 9870000, 60, "1904-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 586694879999870000, 1860, 2, 29, 23, 59, 59, 987, 9870000, 60, "1860-02-29 23:59:59.9870000", "", "", "", "", "" },
            { 569022623999870000, 1804, 2, 29, 23, 59, 59, 987, 9870000, 60, "1804-02-29 23:59:59.9870000", "", "", "", "", "" },
            {   3522527999870000,   12, 2, 29, 23, 59, 59, 987, 9870000, 60, "0012-02-29 23:59:59.9870000", "", "", "", "", "" },
            {   2260223999870000,    8, 2, 29, 23, 59, 59, 987, 9870000, 60, "0008-02-29 23:59:59.9870000", "", "", "", "", "" }
        };
        const int leapYear_dataLength{ sizeof leapYear_data / sizeof(DotNetData) };

        TESTCASE("isLeapYear: verification against .net implementation (leap years)")
        {
            for (int i = 0; i < leapYear_dataLength; ++i)
            {
                DotNetData d = leapYear_data[i];
                const bool isLeapYear{ mbc::time::DotNetTicks::isLeapYear(d.year_) };

                ASSERT_IS_TRUE(isLeapYear) << "[" << std::to_string(i) << "] millisecond: " << d.text_full_;
            }
        }

        const DotNetData notLeapYear_data[]
        {
            { 640656863999870000, 2031, 2, 28, 23, 59, 59, 987, 9870000, 59, "2031-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 639394559999870000, 2027, 2, 28, 23, 59, 59, 987, 9870000, 59, "2027-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 987, 9870000, 59, "2025-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 637501535999870000, 2021, 2, 28, 23, 59, 59, 987, 9870000, 59, "2021-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 636239231999870000, 2017, 2, 28, 23, 59, 59, 987, 9870000, 59, "2017-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 634976927999870000, 2013, 2, 28, 23, 59, 59, 987, 9870000, 59, "2013-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 633083039999870000, 2007, 2, 28, 23, 59, 59, 987, 9870000, 59, "2007-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 621722303999870000, 1971, 2, 28, 23, 59, 59, 987, 9870000, 59, "1971-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 621091583999870000, 1969, 2, 28, 23, 59, 59, 987, 9870000, 59, "1969-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 600894719999870000, 1905, 2, 28, 23, 59, 59, 987, 9870000, 59, "1905-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 587325599999870000, 1862, 2, 28, 23, 59, 59, 987, 9870000, 59, "1862-02-28 23:59:59.9870000", "", "", "", "", "" },
            { 568706399999870000, 1803, 2, 28, 23, 59, 59, 987, 9870000, 59, "1803-02-28 23:59:59.9870000", "", "", "", "", "" },
            {   3206303999870000,   11, 2, 28, 23, 59, 59, 987, 9870000, 59, "0011-02-28 23:59:59.9870000", "", "", "", "", "" },
            {   1943999999870000,    7, 2, 28, 23, 59, 59, 987, 9870000, 59, "0007-02-28 23:59:59.9870000", "", "", "", "", "" }
        };
        const int notLeapYear_dataLength{ sizeof notLeapYear_data / sizeof(DotNetData) };

        TESTCASE("isLeapYear: verification against .net implementation (not leap years)")
        {
            for (int i = 0; i < notLeapYear_dataLength; ++i)
            {
                DotNetData d = notLeapYear_data[i];
                const bool isLeapYear{ mbc::time::DotNetTicks::isLeapYear(d.year_) };

                ASSERT_IS_FALSE(isLeapYear) << "[" << std::to_string(i) << "] millisecond: " << d.text_full_;
            }
        }

        typedef struct
        {
            int year_, month_, days_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_);
            }
        } DotNetData_DaysInMonth;
        const DotNetData_DaysInMonth daysInMonth_data[]
        {
            { 2032,  2, 29 },
            { 2031,  2, 28 },
            { 2027,  1, 31 },
            { 2026,  2, 28 },
            { 2025,  3, 31 },
            { 2024,  2, 29 },
            { 2024,  4, 30 },
            { 2023,  5, 31 },
            { 2022,  6, 30 },
            { 2021,  7, 31 },
            { 2020,  2, 29 },
            { 2020,  8, 31 },
            { 2019,  9, 30 },
            { 2018, 10, 31 },
            { 2017, 11, 30 },
            { 2016,  2, 29 },
            { 2016, 12, 31 },
            { 1972,  2, 29 },
            { 1971,  2, 28 },
            { 1970,  1, 31 },
            { 1969,  2, 28 },
            { 1968,  3, 31 },
            { 1968,  2, 29 },
            { 1967,  4, 30 },
            { 1966,  5, 31 },
            { 1965,  6, 30 },
            { 1964,  7, 31 },
            { 1964,  2, 29 },
            { 1963,  8, 31 },
            { 1962,  9, 30 },
            { 1961, 10, 31 },
            { 1960, 11, 30 },
            { 1960,  2, 29 },
            { 1959, 12, 31 },
            { 1604,  2, 29 },
            { 1603,  2, 28 },
            { 1602,  1, 31 },
            { 1601,  2, 28 },
            { 1600,  3, 31 },
            { 1600,  2, 29 },
            { 1599,  4, 30 },
            { 1598,  5, 31 },
            { 1597,  6, 30 },
            { 1696,  7, 31 },
            { 1596,  2, 29 },
            { 1595,  8, 31 },
            { 1594,  9, 30 },
            { 1593, 10, 31 },
            { 1592, 11, 30 },
            { 1592,  2, 29 },
            { 1591, 12, 31 }
        };
        const int daysInMonth_dataLength{ sizeof daysInMonth_data / sizeof(DotNetData_DaysInMonth) };

        TESTCASE("daysInMonth: verification against .net implementation")
        {
            for (int i = 0; i < daysInMonth_dataLength; ++i)
            {
                DotNetData_DaysInMonth d = daysInMonth_data[i];
                const int days{ mbc::time::DotNetTicks::daysInMonth(d.year_, d.month_) };

                ASSERT_EQUAL(d.days_, days) << "[" << std::to_string(i) << "] days in month: " + d.to_string();
            }
        }

        typedef struct
        {
            long long ticks_; int year_, month_, day_, hour_, minute_, second_, nano100_; long long ticksDatePart_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_) + "-" + std::to_string(day_)
                    + " " + std::to_string(hour_) + ":" + std::to_string(minute_) + ":" + std::to_string(second_)
                    + " , nano100" + std::to_string(nano100_) + ", ticks " + std::to_string(ticks_);
            }
        } DotNetData_DatePart;
        const DotNetData_DatePart datePart_data[]
        {
            { 640973087999870000, 2032,  2, 29, 23, 59, 59, 9870000, 640972224000000000 },
            { 639710783999870000, 2028,  2, 29, 23, 59, 59, 9870000, 639709920000000000 },
            { 638448479999870000, 2024,  2, 29, 23, 59, 59, 9870000, 638447616000000000 },
            { 637186175999870000, 2020,  2, 29, 23, 59, 59, 9870000, 637185312000000000 },
            { 635923871999870000, 2016,  2, 29, 23, 59, 59, 9870000, 635923008000000000 },
            { 635268095999870000, 2014,  1, 31, 23, 59, 59, 9870000, 635267232000000000 },
            { 635268095992870000, 2014,  1, 31, 23, 59, 59, 2870000, 635267232000000000 },
            { 635268095989870000, 2014,  1, 31, 23, 59, 58, 9870000, 635267232000000000 },
            { 635268095980070000, 2014,  1, 31, 23, 59, 58,   70000, 635267232000000000 },
            { 634661567999870000, 2012,  2, 29, 23, 59, 59, 9870000, 634660704000000000 },
            { 633399263999870000, 2008,  2, 29, 23, 59, 59, 9870000, 633398400000000000 },
            { 628013197219870000, 1991,  2,  5,  3,  2,  1, 9870000, 628013088000000000 },
            { 622038527999870000, 1972,  2, 29, 23, 59, 59, 9870000, 622037664000000000 },
            { 621701677219870000, 1971,  2,  5,  3,  2,  1, 9870000, 621701568000000000 },
            { 621356005230870000, 1970,  1,  1,  1,  2,  3,  870000, 621355968000000000 },
            { 621355968010870000, 1970,  1,  1,  0,  0,  1,  870000, 621355968000000000 },
            { 621355968009870000, 1970,  1,  1,  0,  0,  0, 9870000, 621355968000000000 },
            { 621355968000020000, 1970,  1,  1,  0,  0,  0,   20000, 621355968000000000 },
            { 621355968000010000, 1970,  1,  1,  0,  0,  0,   10000, 621355968000000000 },
            { 621355968000000000, 1970,  1,  1,  0,  0,  0,       0, 621355968000000000 },
            { 621355967999990000, 1969, 12, 31, 23, 59, 59, 9990000, 621355104000000000 },
            { 621355967999870000, 1969, 12, 31, 23, 59, 59, 9870000, 621355104000000000 },
            { 621355967990870000, 1969, 12, 31, 23, 59, 59,  870000, 621355104000000000 },
            { 621355967989870000, 1969, 12, 31, 23, 59, 58, 9870000, 621355104000000000 },
            { 621355967980870000, 1969, 12, 31, 23, 59, 58,  870000, 621355104000000000 },
            { 621355967990000000, 1969, 12, 31, 23, 59, 59,       0, 621355104000000000 },
            { 620776223999870000, 1968,  2, 29, 23, 59, 59, 9870000, 620775360000000000 },
            { 615390157219870000, 1951,  2,  5,  3,  2,  1, 9870000, 615390048000000000 },
            { 600579359999870000, 1904,  2, 29, 23, 59, 59, 9870000, 600578496000000000 },
            { 586694879999870000, 1860,  2, 29, 23, 59, 59, 9870000, 586694016000000000 },
            { 583833421219870000, 1851,  2,  5,  3,  2,  1, 9870000, 583833312000000000 },
            { 569022623999870000, 1804,  2, 29, 23, 59, 59, 9870000, 569021760000000000 },
            { 552276685219870000, 1751,  2,  5,  3,  2,  1, 9870000, 552276576000000000 },
            { 520719949219870000, 1651,  2,  5,  3,  2,  1, 9870000, 520719840000000000 },
            { 504911232000000000, 1601,  1,  1,  0,  0,  0,       0, 504911232000000000 },
            { 504911231999990000, 1600, 12, 31, 23, 59, 59, 9990000, 504910368000000000 },
            { 504911231999870000, 1600, 12, 31, 23, 59, 59, 9870000, 504910368000000000 },
            { 504911231990870000, 1600, 12, 31, 23, 59, 59,  870000, 504910368000000000 },
            { 504910368000000000, 1600, 12, 31,  0,  0,  0,       0, 504910368000000000 },
            { 489162349219870000, 1551,  2,  5,  3,  2,  1, 9870000, 489162240000000000 },
            { 457605613219870000, 1451,  2,  5,  3,  2,  1, 9870000, 457605504000000000 },
            { 426048877219870000, 1351,  2,  5,  3,  2,  1, 9870000, 426048768000000000 },
            { 394492141219870000, 1251,  2,  5,  3,  2,  1, 9870000, 394492032000000000 },
            { 362934541219870000, 1151,  2,  5,  3,  2,  1, 9870000, 362934432000000000 },
            { 331377805219870000, 1051,  2,  5,  3,  2,  1, 9870000, 331377696000000000 },
            { 299821069219870000,  951,  2,  5,  3,  2,  1, 9870000, 299820960000000000 },
            { 268264333219870000,  851,  2,  5,  3,  2,  1, 9870000, 268264224000000000 },
            { 236706733219870000,  751,  2,  5,  3,  2,  1, 9870000, 236706624000000000 },
            { 205149997219870000,  651,  2,  5,  3,  2,  1, 9870000, 205149888000000000 },
            { 173593261219870000,  551,  2,  5,  3,  2,  1, 9870000, 173593152000000000 },
            { 142036525219870000,  451,  2,  5,  3,  2,  1, 9870000, 142036416000000000 },
            { 110478925219870000,  351,  2,  5,  3,  2,  1, 9870000, 110478816000000000 },
            {  78922189219870000,  251,  2,  5,  3,  2,  1, 9870000,  78922080000000000 },
            {  47365453219870000,  151,  2,  5,  3,  2,  1, 9870000,  47365344000000000 },
            {  15808717219870000,   51,  2,  5,  3,  2,  1, 9870000,  15808608000000000 },
            {   3522527999870000,   12,  2, 29, 23, 59, 59, 9870000,   3521664000000000 },
            {   2260223999870000,    8,  2, 29, 23, 59, 59, 9870000,   2259360000000000 },
            {     30349219870000,    1,  2,  5,  3,  2,  1, 9870000,     30240000000000 }
        };
        const int datePart_dataLength{ sizeof datePart_data / sizeof(DotNetData_DatePart) };

        TESTCASE("datePartTicks: verification against .net implementation")
        {
            for (int i = 0; i < datePart_dataLength; ++i)
            {
                DotNetData_DatePart d = datePart_data[i];
                const long long datePartTicks{ mbc::time::DotNetTicks::datePartTicks(d.ticks_) };

                ASSERT_EQUAL(d.ticksDatePart_, datePartTicks) << "[" << std::to_string(i) + "] date part ticks: " + d.to_string();
            }
        }

        typedef struct
        {
            long long ticks_; int year_, month_, day_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_) + "-" + std::to_string(day_)
                    + " , ticks " + std::to_string(ticks_);
            }
        } DotNetData_Date;
        const DotNetData_Date date_data[]
        {
            { 640972224000000000, 2032,  2, 29 },
            { 639709920000000000, 2028,  2, 29 },
            { 638447616000000000, 2024,  2, 29 },
            { 637185312000000000, 2020,  2, 29 },
            { 635923008000000000, 2016,  2, 29 },
            { 635267232000000000, 2014,  1, 31 },
            { 635267232000000000, 2014,  1, 31 },
            { 635267232000000000, 2014,  1, 31 },
            { 635267232000000000, 2014,  1, 31 },
            { 634660704000000000, 2012,  2, 29 },
            { 633398400000000000, 2008,  2, 29 },
            { 628013088000000000, 1991,  2,  5 },
            { 622037664000000000, 1972,  2, 29 },
            { 621701568000000000, 1971,  2,  5 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355968000000000, 1970,  1,  1 },
            { 621355104000000000, 1969, 12, 31 },
            { 621355104000000000, 1969, 12, 31 },
            { 621355104000000000, 1969, 12, 31 },
            { 621355104000000000, 1969, 12, 31 },
            { 621355104000000000, 1969, 12, 31 },
            { 621355104000000000, 1969, 12, 31 },
            { 620775360000000000, 1968,  2, 29 },
            { 615390048000000000, 1951,  2,  5 },
            { 600578496000000000, 1904,  2, 29 },
            { 586694016000000000, 1860,  2, 29 },
            { 583833312000000000, 1851,  2,  5 },
            { 569021760000000000, 1804,  2, 29 },
            { 552276576000000000, 1751,  2,  5 },
            { 520719840000000000, 1651,  2,  5 },
            { 504911232000000000, 1601,  1,  1 },
            { 504910368000000000, 1600, 12, 31 },
            { 504910368000000000, 1600, 12, 31 },
            { 504910368000000000, 1600, 12, 31 },
            { 504910368000000000, 1600, 12, 31 },
            { 489162240000000000, 1551,  2,  5 },
            { 457605504000000000, 1451,  2,  5 },
            { 426048768000000000, 1351,  2,  5 },
            { 394492032000000000, 1251,  2,  5 },
            { 362934432000000000, 1151,  2,  5 },
            { 331377696000000000, 1051,  2,  5 },
            { 299820960000000000,  951,  2,  5 },
            { 268264224000000000,  851,  2,  5 },
            { 236706624000000000,  751,  2,  5 },
            { 205149888000000000,  651,  2,  5 },
            { 173593152000000000,  551,  2,  5 },
            { 142036416000000000,  451,  2,  5 },
            { 110478816000000000,  351,  2,  5 },
            {  78922080000000000,  251,  2,  5 },
            {  47365344000000000,  151,  2,  5 },
            {  15808608000000000,   51,  2,  5 },
            {   3521664000000000,   12,  2, 29 },
            {   2259360000000000,    8,  2, 29 },
            {     30240000000000,    1,  2,  5 }
        };
        const int date_dataLength{ sizeof date_data / sizeof(DotNetData_Date) };

        TESTCASE("fromDate: verification against .net implementation")
        {
            for (int i = 0; i < date_dataLength; ++i)
            {
                DotNetData_Date d = date_data[i];
                const long long dateTicks{ mbc::time::DotNetTicks::fromDate(d.year_, d.month_, d.day_) };

                ASSERT_EQUAL(d.ticks_, dateTicks) << "[" << std::to_string(i) + "] date ticks: " + d.to_string();
            }
        }

        typedef struct
        {
            long long ticks_; bool valid_;
        } DotNetData_IsValid;
        const DotNetData_IsValid isValid_data[]
        {
            { 640973087999870000, true},
            { -1, false },
            { 3155378976000000000, false }
        };
        const int isValid_dataLength{ sizeof isValid_data / sizeof(DotNetData_IsValid) };

        TESTCASE("isValid: verification against .net implementation")
        {
            for (int i = 0; i < isValid_dataLength; ++i)
            {
                const DotNetData_IsValid d = isValid_data[i];
                const bool valid{ mbc::time::DotNetTicks::isValid(d.ticks_) };

                ASSERT_EQUAL(d.valid_, valid) << "[" << std::to_string(i) + "] ticks " + std::to_string(d.ticks_);
            }
        }

        typedef struct
        {
            long long ticks_; int year_, month_, day_, hour_, minute_, second_, nano100_; long long delta_, ticksNew_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_) + "-" + std::to_string(day_)
                    + " " + std::to_string(hour_) + ":" + std::to_string(minute_) + ":" + std::to_string(second_)
                    + " , nano100" + std::to_string(nano100_) + ", ticks " + std::to_string(ticks_)
                    + ", delta " + std::to_string(delta_);
            }
        } DotNetData_AddTicks;
        const DotNetData_AddTicks addTicks_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000, 638763839999860000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000, 638763839999869000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100, 638763839999869900 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10, 638763839999869990 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1, 638763839999870001 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10, 638763839999870010 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100, 638763839999870100 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000, 638763839999871000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000, 638763839999880000 }
        };
        const int addTicks_dataLength{ sizeof addTicks_data / sizeof(DotNetData_AddTicks) };

        TESTCASE("addTicks: verification against .net implementation")
        {
            for (int i = 0; i < addTicks_dataLength; ++i)
            {
                DotNetData_AddTicks d = addTicks_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addTicks(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        typedef struct
        {
            long long ticks_; int year_, month_, day_, hour_, minute_, second_, nano100_; double delta_; long long ticksNew_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_) + "-" + std::to_string(day_)
                    + " " + std::to_string(hour_) + ":" + std::to_string(minute_) + ":" + std::to_string(second_)
                    + " , nano100" + std::to_string(nano100_) + ", ticks " + std::to_string(ticks_)
                    + ", delta " + std::to_string(delta_);
            }
        } DotNetData_AddDouble;
        const DotNetData_AddDouble addMilliseconds_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.51234567, 638763839899860000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.49123456, 638763839899870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,          -10000, 638763839899870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.51234567, 638763839989860000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.49123456, 638763839989870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           -1000, 638763839989870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.51234567, 638763839998860000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.49123456, 638763839998870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            -100, 638763839998870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.51234567, 638763839999760000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.49123456, 638763839999770000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             -10, 638763839999770000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.51234567, 638763839999860000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.49123456, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.49123456, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.51234567, 638763839999880000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               1, 638763839999880000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.49123456, 638763839999880000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.51234567, 638763839999890000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,              10, 638763839999970000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.49123456, 638763839999970000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.51234567, 638763839999980000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             100, 638763840000870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.49123456, 638763840000870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.51234567, 638763840000880000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            1000, 638763840009870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.49123456, 638763840009870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.51234567, 638763840009880000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           10000, 638763840099870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.49123456, 638763840099870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.51234567, 638763840099880000 }
        };
        const int addMilliseconds_dataLength{ sizeof addMilliseconds_data / sizeof(DotNetData_AddDouble) };

        TESTCASE("addMilliseconds: verification against .net implementation")
        {
            for (int i = 0; i < addMilliseconds_dataLength; ++i)
            {
                DotNetData_AddDouble d = addMilliseconds_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addMilliseconds(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        const DotNetData_AddDouble addSeconds_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.51234567, 638763739994750000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.49123456, 638763739994960000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,          -10000, 638763739999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.51234567, 638763829994750000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.49123456, 638763829994960000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           -1000, 638763829999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.51234567, 638763838994750000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.49123456, 638763838994960000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            -100, 638763838999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.51234567, 638763839894750000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.49123456, 638763839894960000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             -10, 638763839899870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.51234567, 638763839994750000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.49123456, 638763839994960000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.49123456, 638763840004780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.51234567, 638763840004990000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               1, 638763840009870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.49123456, 638763840014780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.51234567, 638763840014990000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,              10, 638763840099870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.49123456, 638763840104780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.51234567, 638763840104990000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             100, 638763840999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.49123456, 638763841004780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.51234567, 638763841004990000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            1000, 638763849999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.49123456, 638763850004780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.51234567, 638763850004990000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           10000, 638763939999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.49123456, 638763940004780000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.51234567, 638763940004990000 }
        };
        const int addSeconds_dataLength{ sizeof addSeconds_data / sizeof(DotNetData_AddDouble) };

        TESTCASE("addSeconds: verification against .net implementation")
        {
            for (int i = 0; i < addSeconds_dataLength; ++i)
            {
                DotNetData_AddDouble d = addSeconds_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addSeconds(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        const DotNetData_AddDouble addMinutes_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.51234567, 638757839692460000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.49123456, 638757839705130000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,          -10000, 638757839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.51234567, 638763239692460000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.49123456, 638763239705130000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           -1000, 638763239999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.51234567, 638763779692460000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.49123456, 638763779705130000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            -100, 638763779999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.51234567, 638763833692460000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.49123456, 638763833705130000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             -10, 638763833999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.51234567, 638763839692460000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.49123456, 638763839705130000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.49123456, 638763840294610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.51234567, 638763840307280000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               1, 638763840599870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.49123456, 638763840894610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.51234567, 638763840907280000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,              10, 638763845999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.49123456, 638763846294610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.51234567, 638763846307280000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             100, 638763899999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.49123456, 638763900294610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.51234567, 638763900307280000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            1000, 638764439999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.49123456, 638764440294610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.51234567, 638764440307280000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           10000, 638769839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.49123456, 638769840294610000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.51234567, 638769840307280000 }
        };
        const int addMinutes_dataLength{ sizeof addMinutes_data / sizeof(DotNetData_AddDouble) };

        TESTCASE("addMinutes: verification against .net implementation")
        {
            for (int i = 0; i < addMinutes_dataLength; ++i)
            {
                DotNetData_AddDouble d = addMinutes_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addMinutes(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        const DotNetData_AddDouble addHours_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.51234567, 638403821555430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.49123456, 638403822315430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,          -10000, 638403839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.51234567, 638727821555430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.49123456, 638727822315430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           -1000, 638727839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.51234567, 638760221555430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.49123456, 638760222315430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            -100, 638760239999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.51234567, 638763461555430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.49123456, 638763462315430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             -10, 638763479999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.51234567, 638763821555430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.49123456, 638763822315430000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.49123456, 638763857684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.51234567, 638763858444310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               1, 638763875999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.49123456, 638763893684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.51234567, 638763894444310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,              10, 638764199999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.49123456, 638764217684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.51234567, 638764218444310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             100, 638767439999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.49123456, 638767457684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.51234567, 638767458444310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            1000, 638799839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.49123456, 638799857684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.51234567, 638799858444310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           10000, 639123839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.49123456, 639123857684310000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.51234567, 639123858444310000 }
        };
        const int addHours_dataLength{ sizeof addHours_data / sizeof(DotNetData_AddDouble) };

        TESTCASE("addHours: verification against .net implementation")
        {
            for (int i = 0; i < addHours_dataLength; ++i)
            {
                DotNetData_AddDouble d = addHours_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addHours(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        const DotNetData_AddDouble addDays_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.51234567, 630123397333210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000.49123456, 630123415573210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,          -10000, 630123839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.51234567, 637899397333210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000.49123456, 637899415573210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           -1000, 637899839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.51234567, 638676997333210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100.49123456, 638677015573210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            -100, 638677439999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.51234567, 638754757333210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10.49123456, 638754775573210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             -10, 638755199999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.51234567, 638763397333210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     -0.49123456, 638763415573210000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.49123456, 638764264426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0.51234567, 638764282666530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,               1, 638764703999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.49123456, 638765128426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1.51234567, 638765146666530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,              10, 638772479999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.49123456, 638772904426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10.51234567, 638772922666530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,             100, 638850239999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.49123456, 638850664426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100.51234567, 638850682666530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,            1000, 639627839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.49123456, 639628264426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000.51234567, 639628282666530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,           10000, 647403839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.49123456, 647404264426530000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000.51234567, 647404282666530000 }
        };
        const int addDays_dataLength{ sizeof addDays_data / sizeof(DotNetData_AddDouble) };

        TESTCASE("addDays: verification against .net implementation")
        {
            for (int i = 0; i < addDays_dataLength; ++i)
            {
                DotNetData_AddDouble d = addDays_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addDays(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        typedef struct
        {
            long long ticks_; int year_, month_, day_, hour_, minute_, second_, nano100_; int delta_; long long ticksNew_;
            [[nodiscard]] std::string to_string() const
            {
                return std::to_string(year_) + "-" + std::to_string(month_) + "-" + std::to_string(day_)
                    + " " + std::to_string(hour_) + ":" + std::to_string(minute_) + ":" + std::to_string(second_)
                    + " , nano100" + std::to_string(nano100_) + ", ticks " + std::to_string(ticks_)
                    + ", delta " + std::to_string(delta_);
            }
        } DotNetData_AddInt;
        const DotNetData_AddInt addMonths_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -10000, 375787295999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -1000, 612464543999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -100, 636132959999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    -10, 638499455999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,      1, 638788031999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     10, 639025631999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    100, 641392127999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   1000, 665059679999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  10000, 901736927999870000 }
        };
        const int addMonths_dataLength{ sizeof addMonths_data / sizeof(DotNetData_AddInt) };

        TESTCASE("addMonths: verification against .net implementation")
        {
            for (int i = 0; i < addMonths_dataLength; ++i)
            {
                DotNetData_AddInt d = addMonths_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addMonths(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }

        const DotNetData_AddInt addYears_data[]
        {
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000, -1000, 323193887999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  -100, 607206239999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   -10, 635607647999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     0, 638763839999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,     1, 639079199999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,    10, 641919167999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,   100, 670320575999870000 },
            { 638763839999870000, 2025, 2, 28, 23, 59, 59, 9870000,  1000, 954332927999870000 }
        };
        const int addYears_dataLength{ sizeof addYears_data / sizeof(DotNetData_AddInt) };

        TESTCASE("addYears: verification against .net implementation")
        {
            for (int i = 0; i < addYears_dataLength; ++i)
            {
                DotNetData_AddInt d = addYears_data[i];
                const long long ticks{ mbc::time::DotNetTicks::addYears(d.ticks_, d.delta_) };

                ASSERT_EQUAL(d.ticksNew_, ticks) << "[" << std::to_string(i) + "]: " + d.to_string();
            }
        }
    }
}
