<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Mbhv">

        <SolidColorBrush x:Key="backBlue" Color="#000080"/>
        <SolidColorBrush x:Key="backLightBlue" Color="#008080"/>
        <SolidColorBrush x:Key="textBlue" Color="#00ffff"/>
        <SolidColorBrush x:Key="backGreen" Color="#008080"/>
        <SolidColorBrush x:Key="textWhite" Color="#ffffff"/>
        <SolidColorBrush x:Key="textYellow" Color="#ffff00"/>
        <SolidColorBrush x:Key="textBlack" Color="#000000"/>
        <SolidColorBrush x:Key="backGray" Color="LightGray"/>
        <VisualBrush x:Key="textBlueDotFillBrush" TileMode="Tile" Viewport="0,0,2,2" ViewportUnits="Absolute" Viewbox="0,0,3,3" ViewboxUnits="Absolute">
            <VisualBrush.Visual>
                <Canvas>
                    <Rectangle Fill="{StaticResource backBlue}" Width="2" Height="2" />
                    <Ellipse Fill="{StaticResource textBlue}" Width="2" Height="2" />
                </Canvas>
            </VisualBrush.Visual>
        </VisualBrush>
        <VisualBrush x:Key="textLightBlueDotFillBrush" TileMode="Tile" Viewport="0,0,2,2" ViewportUnits="Absolute" Viewbox="0,0,3,3" ViewboxUnits="Absolute">
            <VisualBrush.Visual>
                <Canvas>
                    <Rectangle Fill="{StaticResource backLightBlue}" Width="2" Height="2" />
                    <Ellipse Fill="{StaticResource textBlue}" Width="2" Height="2" />
                    <!-- hatchedBrush Path Stroke="{StaticResource textBlue}" Data="M 0 0 l 2 2" />
                    <Path Stroke="{StaticResource textBlue}" Data="M 0 10 l 2 -2" / -->
                </Canvas>
            </VisualBrush.Visual>
        </VisualBrush>

        <!-- SolidColorBrush Color="#ff0000" x:Key="{x:Static SystemColors.ScrollBarBrushKey}"/>
        <SolidColorBrush Color="#000080" x:Key="{x:Static SystemColors.WindowBrushKey}"/>
        <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.ControlBrushKey}"/ -->

        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Background" Value="{StaticResource backBlue}" />
            <Setter Property="Foreground" Value="{StaticResource textWhite}" />
            <Setter Property="BorderBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <Style TargetType="{x:Type DataGridRowHeader}">
            <Setter Property="Background" Value="{StaticResource backBlue}" />
            <Setter Property="Foreground" Value="{StaticResource textWhite}" />
            <Setter Property="BorderBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderThickness" Value="1,0,0,0" />
        </Style>

        <!-- ScrollViewer ScrollBar Repeat Buttons (at each end) -->
        <Style x:Key="sScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Name="Border" Margin="0" CornerRadius="0" Background="{StaticResource backBlue}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource textBlue}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                        <!-- ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Foreground" Value="{StaticResource textWhite}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers -->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- ScrollViewer ScrollBar Repeat Buttons (the part in the middle, not the thumb the long area between the buttons) -->
        <Style x:Key="sScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Transparent" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--  ScrollBar Thumb, that part that can be dragged up/down or left/right Buttons -->
        <Style x:Key="sScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="0" Background="{StaticResource textLightBlueDotFillBrush}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="sVerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid >
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="18"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="18"/>
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="3" CornerRadius="0" Background="{StaticResource textBlueDotFillBrush}" />
                <RepeatButton Grid.Row="0" Style="{StaticResource sScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 6 L 12 6 L 6 0 Z" />
                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource sScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource sScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource textLightBlueDotFillBrush}" BorderBrush="Transparent" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource sScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Row="3" Style="{StaticResource sScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 6 6 L 12 0 Z"/>
            </Grid>
        </ControlTemplate>
        <!-- HorizontalScrollBar Template using the previously created Templates -->
        <ControlTemplate x:Key="sHorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="18"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition MaxWidth="18"/>
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="{StaticResource textBlueDotFillBrush}" />
                <RepeatButton Grid.Column="0" Style="{StaticResource sScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 6 0 L 6 12 L 0 6 Z" />
                <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource sScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource sScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource textLightBlueDotFillBrush}" BorderBrush="Transparent" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource sScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Column="3" Style="{StaticResource sScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 6 6 L 0 12 Z"/>
            </Grid>
        </ControlTemplate>
        <!--  for overall  ScrollBar -->
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Background" Value="{StaticResource textBlueDotFillBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource textBlue}" />
                    <Setter Property="Template" Value="{StaticResource sHorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Background" Value="{StaticResource textBlueDotFillBrush}" />
                    <Setter Property="Foreground" Value="{StaticResource textBlue}" />
                    <Setter Property="Width" Value="18"/>
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource sVerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="mainGridStyle" TargetType="{x:Type Grid}">
            <Setter Property="Background" Value="{StaticResource backBlue}" />
        </Style>

        <Style x:Key="stackPanelStyle" TargetType="{x:Type StackPanel}">
            <Setter Property="Margin" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="{StaticResource backBlue}" />
        </Style>

        <Style x:Key="buttonStackPanelStyle" TargetType="{x:Type StackPanel}">
            <Setter Property="Margin" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
        </Style>

        <Style x:Key="contentViewToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <Style.Resources>
                <Path Margin="2" x:Key="pathList" Fill="{StaticResource textBlack}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Data="M0,0H10V2H0ZM0,4H10V6H0ZM0,8H10V10H0Z" />
                <Path Margin="2" x:Key="pathTree" Fill="{StaticResource textBlack}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                  Data="M0,0H10V2H0ZM3,2V6H10V4H5V2ZM6,6V10H10V8H8V6Z" />
            </Style.Resources>
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="IsThreeState" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="ButtonBorder" Background="{StaticResource backGreen}" BorderThickness="0" BorderBrush="Transparent" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                            <Grid>
                                <Path Margin="3" x:Name="icon" Fill="{StaticResource textBlack}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  Data="M0,0H10V2H0ZM3,2V6H10V4H5V2ZM6,6V10H10V8H8V6Z" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="icon" Property="Data" Value="M0,0H10V2H0ZM0,4H10V6H0ZM0,8H10V10H0Z"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="icon" Property="Data" Value="M0,0H10V2H0ZM3,2V6H10V4H5V2ZM6,6V10H10V8H8V6Z"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="listBoxStyle" TargetType="ListBox" >
            <Style.Resources>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
                <SolidColorBrush Color="#ffff00" x:Key="{x:Static SystemColors.HighlightTextBrushKey}"/>
                <SolidColorBrush Color="#00ffff" x:Key="{x:Static SystemColors.ControlTextBrushKey}"/>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.ControlBrushKey}"/>
            </Style.Resources>
            <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="True"/>
            <Setter Property="Margin" Value="0" />
            <Setter Property="Background" Value="#000080" />
            <Setter Property="BorderBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="AlternationCount" Value="1"/>
            <Setter Property="ClipToBounds" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="ListBox.ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Content" Value="{Binding Path=Path}"/>
                        <Setter Property="Margin" Value="2,0,2,0"/>
                        <Setter Property="Foreground" Value="{StaticResource textBlue}"/>
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsParsed}" Value="False">
                                <Setter Property="FontStyle" Value="Italic"/>
                                <!-- Setter Property="TextDecorations" Value="Strikethrough"/-->
                                <Setter Property="Foreground" Value="#ff00ff"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="TreeViewItem">
            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
        </Style>

        <Style x:Key="treeItemStyle" TargetType="{x:Type TextBlock}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=IsDataset}" Value="False">
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Foreground" Value="{StaticResource textWhite}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=IsParsed}" Value="False">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="TextDecorations" Value="Strikethrough"/>
                    <Setter Property="Foreground" Value="#ff00ff"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <HierarchicalDataTemplate ItemsSource="{Binding Items}" x:Key="treeItemTemplate">
            <TextBlock Text="{Binding Path=Label}" Style="{StaticResource treeItemStyle}"/>
        </HierarchicalDataTemplate>

        <Style x:Key="treeViewStyle" TargetType="{x:Type TreeView}">
            <Style.Resources>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
                <SolidColorBrush Color="#ffff00" x:Key="{x:Static SystemColors.HighlightTextBrushKey}"/>
                <SolidColorBrush Color="#00ffff" x:Key="{x:Static SystemColors.ControlTextBrushKey}"/>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.ControlBrushKey}"/>
            </Style.Resources>
            <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="Background" Value="{StaticResource backBlue}" />
            <Setter Property="BorderBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="True"/>
            <Setter Property="ClipToBounds" Value="True"/>
            <Setter Property="AlternationCount" Value="2"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <StaticResource ResourceKey="treeItemTemplate"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="dataGridStyle" TargetType="{x:Type DataGrid}">
            <Style.Resources>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
                <SolidColorBrush Color="#ffff00" x:Key="{x:Static SystemColors.HighlightTextBrushKey}"/>
                <SolidColorBrush Color="#00ffff" x:Key="{x:Static SystemColors.ControlTextBrushKey}"/>
            </Style.Resources>
            <Setter Property="Margin" Value="1,0,0,0" />
            <Setter Property="Background" Value="{StaticResource backBlue}" />
            <Setter Property="RowBackground" Value="{StaticResource backBlue}" />
            <!-- Setter Property="AlternatingRowBackground" Value="{StaticResource backBlue}" />
            <Setter Property="AlternationCount" Value="2" / -->
            <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource textBlue}" />
            <Setter Property="VerticalGridLinesBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderBrush" Value="{StaticResource textBlue}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Foreground" Value="{StaticResource textBlue}" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
        </Style>

        <Style x:Key="fileSizeTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Margin" Value="1,0,0,0" />
            <Setter Property="Padding" Value="2,0,2,0" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style x:Key="sampleCountTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Padding" Value="2,0,2,0" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style x:Key="contentTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Margin" Value="1,0,0,0" />
            <Setter Property="Padding" Value="2,0,2,0" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <Style x:Key="stepRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="ButtonBorder" Background="{StaticResource backGreen}" BorderThickness="1,1,0,1" BorderBrush="{StaticResource backBlue}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                            <TextBlock HorizontalAlignment="Center" Foreground="{StaticResource textBlack}" Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="stepToggleRadioButtonStyle" TargetType="{x:Type RadioButton}">
            <!-- Setter Property="HorizontalAlignment" Value="Stretch" / -->
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="IsThreeState" Value="False" />
            <Setter Property="GroupName" Value="step" />
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="ButtonBorder" Background="{StaticResource backGreen}" BorderThickness="1,0,0,0" BorderBrush="{StaticResource backBlue}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                                    <StackPanel Orientation="Horizontal" Background="{StaticResource backGreen}">
                                        <Ellipse x:Name="ellipse" Margin="3,2,2,2" Width="6" Height="6" StrokeThickness="0" Fill="{StaticResource textBlack}" />
                                        <ContentPresenter />
                                    </StackPanel>
                                </Border>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="ellipse" Property="Fill" Value="{StaticResource textYellow}"/>
                                <Setter Property="Foreground" Value="{StaticResource textYellow}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="pushButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder" Background="{StaticResource backGreen}" BorderThickness="1,0,0,1" BorderBrush="{StaticResource backBlue}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                            <TextBlock HorizontalAlignment="Center" Foreground="{StaticResource textBlack}" Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="traceTextBoxControlStyle" TargetType="{x:Type local:TraceTextBoxControl}">
            <Style.Resources>
                <SolidColorBrush Color="#008080" x:Key="{x:Static SystemColors.HighlightBrushKey}"/>
                <SolidColorBrush Color="#ffff00" x:Key="{x:Static SystemColors.HighlightTextBrushKey}"/>
                <SolidColorBrush Color="#00ffff" x:Key="{x:Static SystemColors.ControlTextBrushKey}"/>
                <SolidColorBrush Color="#000080" x:Key="{x:Static SystemColors.WindowBrushKey}"/>
            </Style.Resources>
            <!--Style.Triggers>
                <Trigger Property="HasText" Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </Trigger>
                <Trigger Property="HasText" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </Trigger>
            </Style.Triggers-->
        </Style>

        <Style x:Key="lightboxBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="#90000000" />
        </Style>
        <Style x:Key="lightboxDialogBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{StaticResource backGray}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
            <Setter Property="CornerRadius" Value="10,0,10,0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="BitmapEffect">
                <Setter.Value>
                    <DropShadowBitmapEffect Color="Black" Opacity="0.5" Direction="270" ShadowDepth="0.7" />
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="lightboxButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Margin" Value="2" />
            <Setter Property="Padding" Value="2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="ButtonBorder" Background="{StaticResource backGray}" BorderThickness="0" BorderBrush="{StaticResource textBlack}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                            <StackPanel Orientation="Horizontal" Background="Transparent">
                                <TextBlock Margin="1" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource textBlack}" Text="["/>
                                <TextBlock Margin="1" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource textBlack}" Text="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <TextBlock Margin="1" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource textBlack}" Text="]"/>
                            </StackPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="lightboxTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="Transparent" />
        </Style>
        <Style x:Key="lightboxTextBoxStyle" TargetType="{x:Type TextBox}">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="Foreground" Value="{StaticResource textWhite}" />
            <Setter Property="Background" Value="{StaticResource backGreen}" />
            <Setter Property="CaretBrush" Value="{StaticResource textWhite}" />
            <Setter Property="SelectionBrush" Value="{StaticResource textYellow}" />
        </Style>
        <Style x:Key="lightboxCheckBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="IsThreeState" Value="False" />
            <Setter Property="Foreground" Value="{StaticResource textBlack}" />
            <Setter Property="Background" Value="{StaticResource backGray}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="ButtonBorder" Background="{StaticResource backGreen}" BorderThickness="0" BorderBrush="{StaticResource backBlue}" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Stretch">
                                    <StackPanel Orientation="Horizontal" Background="{StaticResource backGray}">
                                        <Rectangle x:Name="checkmark" Margin="2" Width="8" Height="8" StrokeThickness="1" Stroke="{StaticResource textBlack}" Fill="{StaticResource backGray}" />
                                        <ContentPresenter />
                                    </StackPanel>
                                </Border>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter TargetName="checkmark" Property="Fill" Value="{StaticResource textYellow}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="lightboxProgressBarStyle" TargetType="{x:Type ProgressBar}">
            <Setter Property="Height" Value="20" />
            <Setter Property="Background" Value="{StaticResource textBlueDotFillBrush}" />
            <Setter Property="Foreground" Value="{StaticResource textLightBlueDotFillBrush}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <!-- Setter Property="OverridesDefaultStyle" Value="True" /-->
            <Setter Property="Value" Value="90" />
        </Style>

        <local:RowNumberConverter x:Key="rowNumberConverter" />
</ResourceDictionary>